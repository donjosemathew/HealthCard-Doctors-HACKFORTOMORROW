{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathons\\\\health-carrd\\\\src\\\\context\\\\auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { signInWithPopup, GoogleAuthProvider, getRedirectResult } from \"firebase/auth\";\nimport { provider, auth } from \"../firebase/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\nconst AuthContextprovider = props => {\n  _s();\n\n  const name = \"ji\";\n  const [user, setUser] = useState(\"\"); ///////Current User\n\n  getRedirectResult(auth).then(result => {\n    // This gives you a Google Access Token. You can use it to access Google APIs.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken; // The signed-in user info.\n\n    const user = result.user;\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message; // The email of the user's account used.\n\n    const email = error.email; // The AuthCredential type that was used.\n\n    const credential = GoogleAuthProvider.credentialFromError(error); // ...\n  }); ///////////SignIn\n\n  const SignIn = () => {\n    signInWithPopup(auth, provider).then(result => {\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      setUser({\n        name: result.user.displayName,\n        email: result.user.email,\n        phonenum: result.user.phoneNumber,\n        photo: result.user.photoURL\n      });\n      console.log(result.user.displayName);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: user,\n      SignIn\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextprovider, \"O8A1O7ueRI69RLawqs90Wgk1R68=\");\n\n_c = AuthContextprovider;\nexport default AuthContextprovider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextprovider\");","map":{"version":3,"sources":["D:/Hackathons/health-carrd/src/context/auth.js"],"names":["React","createContext","useEffect","useState","signInWithPopup","GoogleAuthProvider","getRedirectResult","provider","auth","AuthContext","AuthContextprovider","props","name","user","setUser","then","result","credential","credentialFromResult","token","accessToken","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","SignIn","displayName","phonenum","phoneNumber","photo","photoURL","console","log","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SACEC,eADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,eAJP;AAKA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,sBAA/B;;AACA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,EAAjC;;AAEP,MAAMS,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAMC,IAAI,GAAG,IAAb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CAFqC,CAGrC;;AACAG,EAAAA,iBAAiB,CAACE,IAAD,CAAjB,CACGO,IADH,CACSC,MAAD,IAAY;AAChB;AACA,UAAMC,UAAU,GAAGZ,kBAAkB,CAACa,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,UAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAKhB;;AACA,UAAMP,IAAI,GAAGG,MAAM,CAACH,IAApB;AACD,GARH,EASGQ,KATH,CASUC,KAAD,IAAW;AAChB;AACA,UAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;AACA,UAAMC,KAAK,GAAGL,KAAK,CAACK,KAApB,CALgB,CAMhB;;AACA,UAAMV,UAAU,GAAGZ,kBAAkB,CAACuB,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPgB,CAQhB;AACD,GAlBH,EAJqC,CAuBrC;;AACA,QAAMO,MAAM,GAAG,MAAM;AACnBzB,IAAAA,eAAe,CAACI,IAAD,EAAOD,QAAP,CAAf,CACGQ,IADH,CACSC,MAAD,IAAY;AAChB,YAAMC,UAAU,GAAGZ,kBAAkB,CAACa,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,YAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB;AACAN,MAAAA,OAAO,CAAC;AACNF,QAAAA,IAAI,EAAEI,MAAM,CAACH,IAAP,CAAYiB,WADZ;AAENH,QAAAA,KAAK,EAAEX,MAAM,CAACH,IAAP,CAAYc,KAFb;AAGNI,QAAAA,QAAQ,EAAEf,MAAM,CAACH,IAAP,CAAYmB,WAHhB;AAINC,QAAAA,KAAK,EAAEjB,MAAM,CAACH,IAAP,CAAYqB;AAJb,OAAD,CAAP;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAM,CAACH,IAAP,CAAYiB,WAAxB;AACD,KAXH,EAYGT,KAZH,CAYUC,KAAD,IAAW;AAChBa,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACD,KAdH;AAeD,GAhBD;;AAiBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLT,MAAAA,IAAI,EAAEA,IADD;AAELgB,MAAAA;AAFK,KADT;AAAA,cAMGlB,KAAK,CAAC0B;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAnDD;;GAAM3B,mB;;KAAAA,mB;AAqDN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport {\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  getRedirectResult,\r\n} from \"firebase/auth\";\r\nimport { provider, auth } from \"../firebase/firebase\";\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextprovider = (props) => {\r\n  const name = \"ji\";\r\n  const [user, setUser] = useState(\"\");\r\n  ///////Current User\r\n  getRedirectResult(auth)\r\n    .then((result) => {\r\n      // This gives you a Google Access Token. You can use it to access Google APIs.\r\n      const credential = GoogleAuthProvider.credentialFromResult(result);\r\n      const token = credential.accessToken;\r\n\r\n      // The signed-in user info.\r\n      const user = result.user;\r\n    })\r\n    .catch((error) => {\r\n      // Handle Errors here.\r\n      const errorCode = error.code;\r\n      const errorMessage = error.message;\r\n      // The email of the user's account used.\r\n      const email = error.email;\r\n      // The AuthCredential type that was used.\r\n      const credential = GoogleAuthProvider.credentialFromError(error);\r\n      // ...\r\n    });\r\n  ///////////SignIn\r\n  const SignIn = () => {\r\n    signInWithPopup(auth, provider)\r\n      .then((result) => {\r\n        const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        const token = credential.accessToken;\r\n        setUser({\r\n          name: result.user.displayName,\r\n          email: result.user.email,\r\n          phonenum: result.user.phoneNumber,\r\n          photo: result.user.photoURL,\r\n        });\r\n        console.log(result.user.displayName);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: user,\r\n        SignIn,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextprovider;\r\n"]},"metadata":{},"sourceType":"module"}