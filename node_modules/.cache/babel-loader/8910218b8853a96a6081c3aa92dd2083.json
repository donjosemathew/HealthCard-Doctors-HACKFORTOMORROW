{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathons\\\\health-carrd\\\\src\\\\context\\\\auth.js\";\nimport React, { createContext, useEffect } from \"react\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new GoogleAuthProvider();\nconst auth = getAuth();\nexport const AuthContext = /*#__PURE__*/createContext();\nsignInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = GoogleAuthProvider.credentialFromError(error); // ...\n});\n\nconst AuthContextprovider = props => {\n  const name = \"ji\"; ///////////SignIn\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      name: name\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AuthContextprovider;\nexport default AuthContextprovider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextprovider\");","map":{"version":3,"sources":["D:/Hackathons/health-carrd/src/context/auth.js"],"names":["React","createContext","useEffect","getAuth","signInWithPopup","GoogleAuthProvider","provider","auth","AuthContext","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","AuthContextprovider","props","name","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AAEA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;;AACA,MAAMC,QAAQ,GAAG,IAAID,kBAAJ,EAAjB;AACA,MAAME,IAAI,GAAGJ,OAAO,EAApB;AACA,OAAO,MAAMK,WAAW,gBAAGP,aAAa,EAAjC;AACPG,eAAe,CAACG,IAAD,EAAOD,QAAP,CAAf,CACGG,IADH,CACSC,MAAD,IAAY;AAChB;AACA,QAAMC,UAAU,GAAGN,kBAAkB,CAACO,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,QAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALgB,CAMhB;AACD,CARH,EASGC,KATH,CASUC,KAAD,IAAW;AAChB;AACA,QAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;AACA,QAAMC,KAAK,GAAGL,KAAK,CAACK,KAApB,CALgB,CAMhB;;AACA,QAAMX,UAAU,GAAGN,kBAAkB,CAACkB,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPgB,CAQhB;AACD,CAlBH;;AAoBA,MAAMO,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAMC,IAAI,GAAG,IAAb,CADqC,CAErC;;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,IAAI,EAAEA;AADD,KADT;AAAA,cAKGD,KAAK,CAACE;AALT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAbD;;KAAMH,mB;AAeN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, useEffect } from \"react\";\r\n\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nconst provider = new GoogleAuthProvider();\r\nconst auth = getAuth();\r\nexport const AuthContext = createContext();\r\nsignInWithPopup(auth, provider)\r\n  .then((result) => {\r\n    // This gives you a Google Access Token. You can use it to access the Google API.\r\n    const credential = GoogleAuthProvider.credentialFromResult(result);\r\n    const token = credential.accessToken;\r\n    // The signed-in user info.\r\n    const user = result.user;\r\n    // ...\r\n  })\r\n  .catch((error) => {\r\n    // Handle Errors here.\r\n    const errorCode = error.code;\r\n    const errorMessage = error.message;\r\n    // The email of the user's account used.\r\n    const email = error.email;\r\n    // The AuthCredential type that was used.\r\n    const credential = GoogleAuthProvider.credentialFromError(error);\r\n    // ...\r\n  });\r\n\r\nconst AuthContextprovider = (props) => {\r\n  const name = \"ji\";\r\n  ///////////SignIn\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        name: name,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextprovider;\r\n"]},"metadata":{},"sourceType":"module"}